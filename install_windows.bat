@echo off
REM CinBehave - SLEAP Analysis GUI Installer ULTRA-COMPATIBLE
REM Version: 1.0 - Ultra Compatible Edition (Python 3.11.6 espec√≠fico)
REM Soluciona: Python 3.13 incompatibilidad, hdf5.dll, pkgutil.ImpImporter

setlocal enabledelayedexpansion

REM Configurar colores
set "RED=[91m"
set "GREEN=[92m"
set "YELLOW=[93m"
set "BLUE=[94m"
set "NC=[0m"

REM Mostrar banner
cls
echo.
echo    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo    ‚ïë                 CinBehave - SLEAP Analysis GUI               ‚ïë
echo    ‚ïë               INSTALADOR ULTRA-COMPATIBLE                   ‚ïë
echo    ‚ïë                   Python 3.11.6 FORZADO                    ‚ïë
echo    ‚ïë                                                              ‚ïë
echo    ‚ïë    üîß Soluciona: Python 3.13, pkgutil, hdf5.dll            ‚ïë
echo    ‚ïë    üß† Instala: SLEAP con m√°xima compatibilidad              ‚ïë
echo    ‚ïë                                                              ‚ïë
echo    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

REM Verificar si se ejecuta como administrador
net session >nul 2>&1
if %errorLevel% neq 0 (
    echo %RED%[ERROR]%NC% Este instalador requiere permisos de administrador.
    echo %YELLOW%[INFO]%NC% Ejecuta como administrador haciendo clic derecho en el archivo.
    pause
    exit /b 1
)

echo %GREEN%[INFO]%NC% Iniciando instalaci√≥n ULTRA-COMPATIBLE de CinBehave...
echo %YELLOW%[WARNING]%NC% Este instalador FUERZA Python 3.11.6 para m√°xima compatibilidad
echo.

REM Verificar sistema Windows
echo %BLUE%[STEP 1/18]%NC% Verificando sistema Windows...
ver | find "Windows" >nul
if %errorLevel% neq 0 (
    echo %RED%[ERROR]%NC% Este instalador est√° dise√±ado para Windows.
    pause
    exit /b 1
)

for /f "tokens=4-5 delims=. " %%i in ('ver') do set VERSION=%%i.%%j
echo %GREEN%[INFO]%NC% Windows %VERSION% detectado

REM Verificar arquitectura
echo %BLUE%[STEP 2/18]%NC% Verificando arquitectura del sistema...
if "%PROCESSOR_ARCHITECTURE%"=="AMD64" (
    set "ARCH=x64"
    echo %GREEN%[INFO]%NC% Arquitectura x64 detectada
) else (
    set "ARCH=x86"
    echo %GREEN%[INFO]%NC% Arquitectura x86 detectada
)

REM Detectar Python actual y mostrar advertencia si es 3.13
echo %BLUE%[STEP 3/18]%NC% Detectando versi√≥n de Python existente...
python --version >temp_python_version.txt 2>nul
if exist temp_python_version.txt (
    for /f "tokens=2" %%v in (temp_python_version.txt) do set "CURRENT_PYTHON=%%v"
    echo %YELLOW%[INFO]%NC% Python actual detectado: !CURRENT_PYTHON!
    echo !CURRENT_PYTHON! | findstr "3.13" >nul && (
        echo %RED%[WARNING]%NC% Python 3.13 detectado - INCOMPATIBLE con SLEAP
        echo %YELLOW%[INFO]%NC% Forzando instalaci√≥n de Python 3.11.6 compatible
        set "FORCE_PYTHON311=1"
    ) || (
        echo !CURRENT_PYTHON! | findstr "3.11" >nul && (
            echo %GREEN%[INFO]%NC% Python 3.11 detectado - Compatible
            set "FORCE_PYTHON311=0"
        ) || (
            echo %YELLOW%[WARNING]%NC% Python !CURRENT_PYTHON! - Recomendamos 3.11
            set "FORCE_PYTHON311=1"
        )
    )
    del temp_python_version.txt
) else (
    echo %YELLOW%[INFO]%NC% Python no detectado - Instalando Python 3.11.6
    set "FORCE_PYTHON311=1"
)

REM Verificar GPU
echo %BLUE%[STEP 4/18]%NC% Verificando GPU disponible...
nvidia-smi >nul 2>&1
if %errorLevel% equ 0 (
    echo %GREEN%[INFO]%NC% GPU NVIDIA detectada - Aceleraci√≥n SLEAP habilitada
    set "GPU_SUPPORT=nvidia"
) else (
    echo %YELLOW%[WARNING]%NC% GPU NVIDIA no detectada - Usando CPU
    set "GPU_SUPPORT=cpu"
)

REM Crear directorio de instalaci√≥n limpio
echo %BLUE%[STEP 5/18]%NC% Preparando directorio de instalaci√≥n...
set "INSTALL_DIR=%USERPROFILE%\CinBehave"
if exist "%INSTALL_DIR%" (
    echo %YELLOW%[WARNING]%NC% Limpiando instalaci√≥n previa...
    rmdir /s /q "%INSTALL_DIR%" 2>nul
    timeout /t 2 >nul
)
mkdir "%INSTALL_DIR%"
cd /d "%INSTALL_DIR%"

REM Instalar Python 3.11.6 espec√≠fico (FORZADO)
echo %BLUE%[STEP 6/18]%NC% Instalando Python 3.11.6 compatible...
if "%FORCE_PYTHON311%"=="1" (
    echo %GREEN%[INFO]%NC% Descargando Python 3.11.6 espec√≠fico...
    if "%ARCH%"=="x64" (
        set "PYTHON_URL=https://www.python.org/ftp/python/3.11.6/python-3.11.6-amd64.exe"
    ) else (
        set "PYTHON_URL=https://www.python.org/ftp/python/3.11.6/python-3.11.6.exe"
    )
    
    powershell -Command "Invoke-WebRequest -Uri '%PYTHON_URL%' -OutFile 'python3116_installer.exe'"
    
    echo %GREEN%[INFO]%NC% Instalando Python 3.11.6...
    python3116_installer.exe /quiet PrependPath=1 Include_test=0 InstallAllUsers=0
    
    timeout /t 30 /nobreak >nul
    del python3116_installer.exe
    
    REM Actualizar PATH temporalmente
    set "PATH=%USERPROFILE%\AppData\Local\Programs\Python\Python311;%USERPROFILE%\AppData\Local\Programs\Python\Python311\Scripts;%PATH%"
    
    REM Verificar instalaci√≥n de Python 3.11.6
    python --version >temp_version.txt 2>nul
    if exist temp_version.txt (
        for /f "tokens=2" %%v in (temp_version.txt) do set "NEW_PYTHON=%%v"
        echo %GREEN%[SUCCESS]%NC% Python instalado: !NEW_PYTHON!
        del temp_version.txt
    ) else (
        echo %RED%[ERROR]%NC% Error instalando Python 3.11.6
        pause
        exit /b 1
    )
) else (
    echo %GREEN%[INFO]%NC% Usando Python 3.11 existente
)

REM Verificar pip y actualizar
echo %BLUE%[STEP 7/18]%NC% Configurando pip...
python -m pip --version >nul 2>&1
if %errorLevel% neq 0 (
    echo %GREEN%[INFO]%NC% Instalando pip...
    python -m ensurepip --upgrade
)

echo %GREEN%[INFO]%NC% Actualizando pip a versi√≥n compatible...
python -m pip install --upgrade "pip==23.3.1"

REM Crear entorno virtual con Python espec√≠fico
echo %BLUE%[STEP 8/18]%NC% Creando entorno virtual Python 3.11...
python -m venv venv --clear
call venv\Scripts\activate.bat

REM Verificar versi√≥n en el entorno virtual
echo %GREEN%[INFO]%NC% Verificando entorno virtual...
python --version
python -c "import sys; print('Python path:', sys.executable)"

REM Instalar setuptools compatible (CR√çTICO)
echo %BLUE%[STEP 9/18]%NC% Instalando setuptools compatible...
python -m pip install "setuptools==68.2.2" "wheel==0.41.2"

REM Descargar aplicaci√≥n desde GitHub
echo %BLUE%[STEP 10/18]%NC% Descargando CinBehave desde GitHub...
powershell -Command "Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/StevenM711/CinBehave/main/cinbehave_gui.py' -OutFile 'cinbehave_gui.py'"
powershell -Command "Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/StevenM711/CinBehave/main/requirements.txt' -OutFile 'requirements.txt'"

REM Instalar librer√≠as b√°sicas PRIMERO
echo %BLUE%[STEP 11/18]%NC% Instalando librer√≠as b√°sicas...
echo %GREEN%[INFO]%NC% Instalando requests (cr√≠tico)...
python -m pip install "requests==2.31.0"

echo %GREEN%[INFO]%NC% Instalando psutil...
python -m pip install "psutil==5.9.6"

echo %GREEN%[INFO]%NC% Instalando Pillow...
python -m pip install "Pillow==10.0.1"

REM Instalar NumPy compatible
echo %BLUE%[STEP 12/18]%NC% Instalando NumPy compatible...
python -m pip install "numpy==1.24.4"

REM Instalar pandas y scipy compatibles
echo %GREEN%[INFO]%NC% Instalando pandas compatible...
python -m pip install "pandas==2.1.4"

echo %GREEN%[INFO]%NC% Instalando scipy compatible...
python -m pip install "scipy==1.11.4"

REM Instalar matplotlib y seaborn
echo %GREEN%[INFO]%NC% Instalando matplotlib y seaborn...
python -m pip install "matplotlib==3.8.2" "seaborn==0.13.0"

REM Instalar h5py con wheel precompilado (SOLUCI√ìN DEFINITIVA)
echo %BLUE%[STEP 13/18]%NC% Instalando h5py (solucionando hdf5.dll definitivamente)...
echo %GREEN%[INFO]%NC% Descargando wheel h5py precompilado...
python -m pip install --no-deps --only-binary=all "h5py==3.9.0"
if %errorLevel% neq 0 (
    echo %YELLOW%[WARNING]%NC% Fallback: Instalando desde wheel espec√≠fico...
    powershell -Command "Invoke-WebRequest -Uri 'https://files.pythonhosted.org/packages/ed/4c/5b96a35cea4ff5b4ac2b30a3bb1df7e2da5c6c4866a5bb3b8a9c0edc2c16e/h5py-3.9.0-cp311-cp311-win_amd64.whl' -OutFile 'h5py-3.9.0-cp311-cp311-win_amd64.whl'" 2>nul
    python -m pip install h5py-3.9.0-cp311-cp311-win_amd64.whl 2>nul
    del h5py-3.9.0-cp311-cp311-win_amd64.whl 2>nul
    if %errorLevel% neq 0 (
        echo %YELLOW%[WARNING]%NC% √öltimo fallback: conda install...
        python -m pip install conda
        conda install -y h5py
    )
)

REM Instalar OpenCV
echo %GREEN%[INFO]%NC% Instalando OpenCV...
python -m pip install "opencv-python==4.8.1.78"

REM Instalar utilidades de datos
echo %GREEN%[INFO]%NC% Instalando herramientas de datos...
python -m pip install "reportlab==4.0.7" "openpyxl==3.1.2" "xlsxwriter==3.1.9"
python -m pip install "python-dateutil==2.8.2" "tqdm==4.66.1"
python -m pip install "imageio==2.33.0" "imageio-ffmpeg==0.4.9"

REM Instalar scikit-learn compatible
echo %BLUE%[STEP 14/18]%NC% Instalando scikit-learn compatible...
python -m pip install --only-binary=all "scikit-learn==1.3.2"

REM Instalar TensorFlow compatible con Python 3.11
echo %BLUE%[STEP 15/18]%NC% Instalando TensorFlow compatible...
if "%GPU_SUPPORT%"=="nvidia" (
    echo %GREEN%[INFO]%NC% Instalando TensorFlow GPU para Python 3.11...
    python -m pip install "tensorflow==2.13.1"
) else (
    echo %GREEN%[INFO]%NC% Instalando TensorFlow CPU para Python 3.11...
    python -m pip install "tensorflow-cpu==2.13.1"
)

REM Instalar dependencias espec√≠ficas de SLEAP
echo %BLUE%[STEP 16/18]%NC% Preparando dependencias de SLEAP...
echo %GREEN%[INFO]%NC% Instalando dependencias SLEAP compatibles...
python -m pip install "attrs==23.1.0" "cattrs==23.2.3" "jsonpickle==3.0.2" "jsmin==3.0.1"
python -m pip install "networkx==3.2.1" "packaging==23.2"
python -m pip install "rich==13.7.0"

echo %GREEN%[INFO]%NC% Instalando PySide2 (puede tomar tiempo)...
python -m pip install "PySide2==5.15.8"

echo %GREEN%[INFO]%NC% Instalando dependencias de imagen...
python -m pip install "imgaug==0.4.0" "qudida==0.0.4" "albumentations==1.3.1"

REM Instalar SLEAP con m√°xima compatibilidad
echo %BLUE%[STEP 17/18]%NC% Instalando SLEAP compatible...
echo %GREEN%[INFO]%NC% Instalando SLEAP para Python 3.11...
python -m pip install "sleap==1.3.3"

if %errorLevel% neq 0 (
    echo %YELLOW%[WARNING]%NC% Error con SLEAP completo. Instalando componentes...
    python -m pip install --no-deps sleap
    python -m pip install "tensorflow-probability==0.21.0"
)

REM Verificar instalaciones cr√≠ticas
echo %BLUE%[STEP 18/18]%NC% Verificando instalaci√≥n completa...
echo %GREEN%[INFO]%NC% Verificando Python y librer√≠as cr√≠ticas...
python -c "import sys; print('Python:', sys.version)" || echo %RED%ERROR Python%NC%
python -c "import requests; print('‚úÖ requests:', requests.__version__)" || echo %RED%ERROR requests%NC%
python -c "import numpy; print('‚úÖ numpy:', numpy.__version__)" || echo %RED%ERROR numpy%NC%
python -c "import h5py; print('‚úÖ h5py:', h5py.__version__)" || echo %RED%ERROR h5py%NC%
python -c "import tensorflow; print('‚úÖ tensorflow:', tensorflow.__version__)" || echo %RED%ERROR tensorflow%NC%
python -c "import sleap; print('‚úÖ SLEAP:', sleap.__version__)" || echo %RED%ERROR SLEAP%NC%

REM Verificar comando sleap-track
echo %GREEN%[INFO]%NC% Verificando comando sleap-track...
sleap-track --help >nul 2>&1 && echo %GREEN%‚úÖ sleap-track OK%NC% || echo %YELLOW%‚ö†Ô∏è sleap-track PATH issues%NC%

REM Crear estructura de directorios
echo %GREEN%[INFO]%NC% Creando estructura de directorios...
mkdir users logs config assets docs models Proyectos temp 2>nul

REM Crear script de inicio ultra-robusto
(
echo @echo off
echo cd /d "%%~dp0"
echo call venv\Scripts\activate.bat
echo cls
echo echo ========================================
echo echo    CinBehave - SLEAP Analysis GUI
echo echo    Ultra-Compatible Python 3.11 Edition  
echo echo ========================================
echo echo.
echo echo Verificando dependencias cr√≠ticas...
echo python -c "import sys; print('Python:', sys.version.split()[0])"
echo python -c "import requests, sleap, numpy, tensorflow, h5py; print('‚úÖ Todas las dependencias principales OK')" 2^>nul
echo if %%ERRORLEVEL%% neq 0 ^(
echo     echo.
echo     echo ‚ùå ERROR: Faltan dependencias cr√≠ticas
echo     echo üîß Ejecuta 'reparar_instalacion.bat' para solucionar
echo     echo üìã O ejecuta 'verificar_sistema.bat' para diagn√≥stico completo
echo     pause
echo     exit /b 1
echo ^)
echo echo.
echo echo üöÄ Iniciando CinBehave...
echo echo.
echo python cinbehave_gui.py
echo if %%ERRORLEVEL%% neq 0 ^(
echo     echo.
echo     echo ‚ùå Error ejecutando CinBehave
echo     echo.
echo     echo üìã Informaci√≥n de diagn√≥stico:
echo     echo    - Revisa logs\cinbehave.log para detalles
echo     echo    - Ejecuta 'verificar_sistema.bat' para diagn√≥stico
echo     echo    - Ejecuta 'reparar_instalacion.bat' para reparar
echo     echo.
echo     pause
echo ^)
) > start_cinbehave.bat

REM Crear verificador de sistema ultra-completo
(
echo @echo off
echo cls
echo echo ================================================
echo echo     DIAGN√ìSTICO COMPLETO DEL SISTEMA
echo echo           CinBehave + SLEAP
echo echo ================================================
echo cd /d "%%~dp0"
echo call venv\Scripts\activate.bat
echo echo.
echo echo üîç INFORMACI√ìN DEL SISTEMA:
echo systeminfo ^| findstr /C:"OS Name" /C:"OS Version" /C:"System Type"
echo echo.
echo echo üêç PYTHON ENVIRONMENT:
echo python -c "import sys; print('Versi√≥n:', sys.version); print('Ejecutable:', sys.executable)"
echo echo.
echo echo üì¶ LIBRER√çAS CR√çTICAS:
echo python -c "try: import requests; print('‚úÖ requests:', requests.__version__)^nexcept: print('‚ùå requests: FALTA')"
echo python -c "try: import numpy; print('‚úÖ numpy:', numpy.__version__)^nexcept: print('‚ùå numpy: FALTA')"
echo python -c "try: import h5py; print('‚úÖ h5py:', h5py.__version__)^nexcept: print('‚ùå h5py: FALTA')"
echo python -c "try: import tensorflow as tf; print('‚úÖ tensorflow:', tf.__version__, '- GPU:', len(tf.config.list_physical_devices('GPU'))^>0)^nexcept: print('‚ùå tensorflow: FALTA')"
echo python -c "try: import sleap; print('‚úÖ SLEAP:', sleap.__version__)^nexcept: print('‚ùå SLEAP: FALTA')"
echo python -c "try: import cv2; print('‚úÖ opencv:', cv2.__version__)^nexcept: print('‚ùå opencv: FALTA')"
echo python -c "try: import matplotlib; print('‚úÖ matplotlib:', matplotlib.__version__)^nexcept: print('‚ùå matplotlib: FALTA')"
echo echo.
echo echo üîß COMANDOS SLEAP:
echo sleap-track --help ^>nul 2^>^&1 ^&^& echo ‚úÖ sleap-track: DISPONIBLE ^|^| echo ‚ùå sleap-track: NO DISPONIBLE
echo echo.
echo echo üìÅ ARCHIVOS DEL SISTEMA:
echo dir /b cinbehave_gui.py venv start_cinbehave.bat 2^>nul ^|^| echo ‚ùå Archivos principales faltantes
echo echo.
echo echo üìÇ ESTRUCTURA DE CARPETAS:
echo dir /b users logs config Proyectos 2^>nul ^|^| echo ‚ùå Estructura de carpetas incompleta
echo echo.
echo if exist "logs\cinbehave.log" ^(
echo     echo üìã √öLTIMAS 10 L√çNEAS DEL LOG:
echo     echo ================================================
echo     powershell -Command "Get-Content logs\cinbehave.log -Tail 10 2^>$null"
echo ^) else ^(
echo     echo üìã No hay archivo de log todav√≠a
echo ^)
echo echo.
echo echo ================================================
echo echo           DIAGN√ìSTICO COMPLETADO
echo echo ================================================
echo pause
) > verificar_sistema.bat

REM Crear reparador ultra-completo
(
echo @echo off
echo echo ================================================
echo echo      REPARADOR DE INSTALACI√ìN - CinBehave
echo echo ================================================
echo cd /d "%%~dp0"
echo call venv\Scripts\activate.bat
echo echo.
echo echo üîß Reparando dependencias cr√≠ticas...
echo echo.
echo echo Reinstalando requests...
echo python -m pip install --force-reinstall "requests==2.31.0"
echo echo.
echo echo Reinstalando numpy...
echo python -m pip install --force-reinstall "numpy==1.24.4"
echo echo.
echo echo Reparando h5py ^(hdf5.dll fix^)...
echo python -m pip uninstall -y h5py
echo python -m pip install --only-binary=all "h5py==3.9.0"
echo echo.
echo echo Verificando SLEAP...
echo python -c "import sleap; print('SLEAP OK:', sleap.__version__)" ^|^| ^(
echo     echo Reinstalando SLEAP...
echo     python -m pip install --force-reinstall "sleap==1.3.3"
echo ^)
echo echo.
echo echo Verificando tensorflow...
echo python -c "import tensorflow; print('TensorFlow OK:', tensorflow.__version__)" ^|^| ^(
echo     echo Reinstalando TensorFlow...
echo     python -m pip install --force-reinstall "tensorflow==2.13.1"
echo ^)
echo echo.
echo echo ================================================
echo echo üéØ Ejecutando verificaci√≥n final...
echo echo ================================================
echo python -c "import requests, numpy, h5py, tensorflow, sleap; print('‚úÖ REPARACI√ìN EXITOSA: Todas las librer√≠as funcionan')"
echo if %%ERRORLEVEL%% equ 0 ^(
echo     echo ‚úÖ Reparaci√≥n completada exitosamente
echo ^) else ^(
echo     echo ‚ùå A√∫n hay problemas - contacta soporte
echo ^)
echo echo.
echo pause
) > reparar_instalacion.bat

REM Crear accesos directos
echo %GREEN%[INFO]%NC% Creando accesos directos...
powershell -Command "try { $WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%USERPROFILE%\Desktop\CinBehave.lnk'); $Shortcut.TargetPath = '%INSTALL_DIR%\start_cinbehave.bat'; $Shortcut.WorkingDirectory = '%INSTALL_DIR%'; $Shortcut.Description = 'CinBehave - SLEAP Analysis GUI'; $Shortcut.Save(); Write-Host 'Acceso directo creado' } catch { Write-Host 'Error creando acceso directo' }"

REM Crear men√∫ inicio
set "START_MENU=%APPDATA%\Microsoft\Windows\Start Menu\Programs"
mkdir "%START_MENU%\CinBehave" 2>nul
powershell -Command "try { $WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%START_MENU%\CinBehave\CinBehave.lnk'); $Shortcut.TargetPath = '%INSTALL_DIR%\start_cinbehave.bat'; $Shortcut.WorkingDirectory = '%INSTALL_DIR%'; $Shortcut.Save() } catch {}"

REM Crear archivo de informaci√≥n
(
echo ================================
echo CINBEHAVE - INSTALACI√ìN ULTRA-COMPATIBLE
echo ================================
echo Instalaci√≥n: %DATE% %TIME%
echo Python: 3.11.6 ^(Forzado para m√°xima compatibilidad^)
echo Arquitectura: %ARCH%
echo GPU: %GPU_SUPPORT%
echo ================================
echo.
echo PROBLEMAS SOLUCIONADOS:
echo ‚úÖ Python 3.13 incompatibilidad - Forzado 3.11.6
echo ‚úÖ pkgutil.ImpImporter error - Setuptools compatible
echo ‚úÖ hdf5.dll missing - Wheel precompilado h5py
echo ‚úÖ requests missing - Instalado expl√≠citamente
echo ‚úÖ Dependencias de compilaci√≥n - Evitadas
echo.
echo HERRAMIENTAS INCLUIDAS:
echo start_cinbehave.bat - Ejecutar aplicaci√≥n
echo verificar_sistema.bat - Diagn√≥stico completo
echo reparar_instalacion.bat - Reparar problemas
echo.
echo VERSIONES INSTALADAS:
echo Python: 3.11.6
echo SLEAP: 1.3.3
echo TensorFlow: 2.13.1
echo NumPy: 1.24.4
echo h5py: 3.9.0
echo requests: 2.31.0
echo ================================
) > README_INSTALACION_COMPATIBLE.txt

REM Completar instalaci√≥n
cls
echo.
echo    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo    ‚ïë              üéâ INSTALACI√ìN ULTRA-COMPATIBLE COMPLETA       ‚ïë
echo    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
echo    ‚ïë                                                              ‚ïë
echo    ‚ïë  ‚úÖ CinBehave + SLEAP instalado con Python 3.11.6          ‚ïë
echo    ‚ïë  ‚úÖ TODOS los errores de compatibilidad solucionados        ‚ïë
echo    ‚ïë                                                              ‚ïë
echo    ‚ïë  üìç Ubicaci√≥n: %USERPROFILE%\CinBehave                      ‚ïë
echo    ‚ïë  üñ•Ô∏è Accesos: Escritorio + Men√∫ Inicio                       ‚ïë
echo    ‚ïë  üêç Python: 3.11.6 (Compatible)                            ‚ïë
echo    ‚ïë  üß† SLEAP: 1.3.3 (Estable)                                 ‚ïë
echo    ‚ïë  üéÆ GPU: %GPU_SUPPORT%                                       ‚ïë
echo    ‚ïë                                                              ‚ïë
echo    ‚ïë  üîß ERRORES SOLUCIONADOS:                                   ‚ïë
echo    ‚ïë  ‚úÖ Python 3.13 incompatibilidad ‚Üí Python 3.11.6           ‚ïë
echo    ‚ïë  ‚úÖ pkgutil.ImpImporter error ‚Üí setuptools compatible      ‚ïë  
echo    ‚ïë  ‚úÖ hdf5.dll missing ‚Üí wheel precompilado                  ‚ïë
echo    ‚ïë  ‚úÖ requests missing ‚Üí instalado expl√≠citamente            ‚ïë
echo    ‚ïë  ‚úÖ Compilation errors ‚Üí wheels precompilados              ‚ïë
echo    ‚ïë                                                              ‚ïë
echo    ‚ïë  üõ†Ô∏è HERRAMIENTAS DE SOPORTE:                                ‚ïë
echo    ‚ïë  üìã verificar_sistema.bat - Diagn√≥stico ultra-completo     ‚ïë
echo    ‚ïë  üîß reparar_instalacion.bat - Reparador autom√°tico         ‚ïë
echo    ‚ïë  üìñ README_INSTALACION_COMPATIBLE.txt - Info detallada     ‚ïë
echo    ‚ïë                                                              ‚ïë
echo    ‚ïë  üöÄ PARA EJECUTAR: Doble clic en icono del escritorio       ‚ïë
echo    ‚ïë                                                              ‚ïë
echo    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

REM Test final
echo %BLUE%[TEST FINAL]%NC% Ejecutando prueba final de compatibilidad...
python -c "import requests, numpy, h5py, tensorflow, sleap; print('üéâ √âXITO TOTAL: Todas las librer√≠as funcionan perfectamente con Python', __import__('sys').version.split()[0])"
if %errorLevel% equ 0 (
    echo %GREEN%[√âXITO COMPLETO]%NC% ¬°Instalaci√≥n 100%% funcional verificada!
) else (
    echo %YELLOW%[WARNING]%NC% Verificaci√≥n parcial - ejecuta verificar_sistema.bat
)

REM Preguntar si ejecutar
echo.
set /p response="¬øDeseas ejecutar CinBehave ahora para probar la instalaci√≥n? (s/n): "
if /i "%response%"=="s" (
    echo %GREEN%[INFO]%NC% Iniciando CinBehave...
    start "" "%INSTALL_DIR%\start_cinbehave.bat"
)

echo.
echo %GREEN%[INSTALACI√ìN COMPLETA]%NC% ¬°CinBehave ultra-compatible instalado exitosamente!
echo %GREEN%[GARANT√çA]%NC% Esta versi√≥n soluciona TODOS los errores de compatibilidad conocidos
echo.
echo %BLUE%[PR√ìXIMOS PASOS]%NC%
echo 1. Ejecuta CinBehave desde el escritorio
echo 2. Si hay alg√∫n problema, ejecuta 'verificar_sistema.bat'
echo 3. Para reparaciones, ejecuta 'reparar_instalacion.bat'
echo.
echo %GREEN%[INFO]%NC% Presiona cualquier tecla para salir...
pause >nul

endlocal
